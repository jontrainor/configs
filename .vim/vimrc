" --- install vim.plug if it is not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" --- handled by vim-plug
" syntax on

call plug#begin('~/.vim/plugged')
" --- search and file management
" file search
Plug 'junegunn/fzf.vim'
" buffer manager
Plug 'ctrlpvim/ctrlp.vim'
" uses ack to search
Plug 'mileszs/ack.vim'
" allows switching between associated files
Plug 'tpope/vim-projectionist'

" --- extensions to default functionality
" extra text objects
Plug 'wellle/targets.vim'
" '"surroundings"'
Plug 'tpope/vim-surround'
" extends f/F and t/T
Plug 'rhysd/clever-f.vim'
" extra mappings
Plug 'tpope/vim-unimpaired'
" file manager
Plug 'mcchrish/nnn.vim'
" tag manager
Plug 'ludovicchabant/vim-gutentags'

" --- syntax and text completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"  javascript
Plug 'pangloss/vim-javascript'
Plug 'isRuslan/vim-es6'
Plug 'jelera/vim-javascript-syntax'
Plug 'mxw/vim-jsx'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'moll/vim-node'
Plug 'tomarrell/vim-npr'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
" haxe
Plug 'MarcWeber/vim-haxe-syntax'
" tab complete in search bar
Plug 'vim-scripts/SearchComplete'

" --- git
Plug 'tpope/vim-fugitive'
" show git diff in gutter
Plug 'airblade/vim-gitgutter'

" --- quality of life
"  automatically set indent
Plug 'tpope/vim-sleuth'
" async dispatch commands
Plug 'tpope/vim-dispatch'
"  commenting helper
Plug 'tpope/vim-commentary'
" undo tree manager
Plug 'mbbill/undotree'
" highlight enclosing tags
Plug 'Valloric/MatchTagAlways'
" auto close html tags
Plug 'alvan/vim-closetag'
" visualize color hex codes
Plug 'lilydjwg/colorizer'
" expand selection in visual mode
Plug 'terryma/vim-expand-region'

" --- theme
Plug 'micha/vim-colors-solarized'
"  status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'editorconfig/editorconfig-vim'

call plug#end()

scriptencoding utf-8
set encoding=utf-8

" --- set eof and eol onpeak standard
set fileformats=dos

" --- set shell
set shell=/bin/bash

" --- enable filetype plugins
filetype plugin on

" --- turn off eof new line
set binary
set noeol

" --- set to auto read when a file is changed outside of vim
set autoread

" --- set leader to ','
let mapleader = ","

" --- enable copying from vim to clipboard on linux
"set clipboard=unnamedplus

" --- enable copying from macvim to clipboard on osx
set clipboard=unnamed

" --- quick escape
inoremap jj <Esc>

" --- fast saving
nmap <leader>w :w!<cr>

" --- delete file and remove from buffer
nmap <leader>rm :call delete(expand('%')) \| bdelete!<cr>

" --- reload vimrc settings and clear ctrl-p cache
nmap <leader>r :source ~/.vimrc<cr>:ClearAllCtrlPCaches<cr>

" --- not completely VI compatible
set nocompatible

" --- configure backspace
set backspace=indent,eol,start

" --- right and left wrap lines
set whichwrap+=<,>,h,l,[,]

" --- uses indent of previous line for new line
set autoindent

" --- python indentation
set modeline

" --- number of lines of history will be remembered
set history=500

" --- display current cursor position in lower right corner
set ruler

" --- display incomplete commands to the left of the ruler
set showcmd

" --- search settings 
set incsearch " matches while typing
set ignorecase " case insenstive searching
set smartcase " if a search has an uppercase letter it is case senstive
set hlsearch " highlight search

" --- height of command bar
set cmdheight=2

" --- enable regular expressions
set magic

set report=5 " set largest size of changes reported on status line

" --- buffer is hidden when abandoned
set hid

" --- bash style tab completion for filenames
set wildmenu
set wildmode=list:longest

" --- minimum of 5 lines between cursor and top/bottom of screen
set scrolloff=5

" --- turn off backup and swap files
set nobackup
set nowb
set noswapfile

" --- decrease message size
set shortmess=atIc

" --- grep within vim uses ack
set grepprg=ack

" --- find within vim uses ack
let g:findprg = "ack --sort-files -g"

" --- show line numbers
set number

" --- ignore whitespace in vimdiff
set diffopt+=iwhite

" --- highlight current line
set cursorline

" --- enable mouse to move cursor
set mouse=a

" --- show status line and command line
set ls=2

" --- save original pwd
let g:trainororiginalpwd=getcwd()

" --- set session directory
let g:session_dir = "~/.vim/sessions/"

" --- use undo file
set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000

" --- undotree settings
let g:undotree_WindowLayout = 2
nnoremap <Leader>u :UndotreeToggle<CR>

" --- remappings
map <Leader>k <C-W>k
map <Leader>j <C-W>j
map <Leader>h <C-W>h
map <Leader>l <C-W>l
map <Leader>n :new<CR>
map <Leader>v :vnew<CR>
map <Leader>< :cold<CR>
map <Leader>> :cnew<CR>

" --- close buffer
map <Leader>x :bd<CR>

" --- first letter to uppercase/lowercase
nmap <leader>U mQgewvU`Q
nmap <leader>L  mQgewvu`Q

" --- diff mappings
" map <Leader>g :diffget
" map <Leader>G :diffget<CR>
" map <Leader>p :diffput
" map <Leader>P :diffput<CR>
" map <Leader>u :diffupdate<CR>

" javascript console log macro
nnoremap <leader>cj oconsole.log();<esc>hi
nnoremap <leader>dj odebugger;<esc>

" --- clear highlights
nnoremap <leader><space> :noh<cr>

" --- yank selected text into 'black hole register' and paste
vmap r "_dP

" --- yank into system clipboard
nnoremap <leader>y "+yy
vnoremap <leader>y "+y

let tabstop=4

" markdown options
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufReadPost *.apib set filetype=markdown

" Python-specific options
au FileType python setlocal expandtab shiftwidth=4 tabstop=4 

" Haxe-specific options
au BufNewFile,BufRead *.hx set filetype=haxe
au FileType haxe setlocal expandtab shiftwidth=4 tabstop=4

" pico-8 specific options
autocmd BufNewFile,BufRead *.p8 set syntax=lua

" --- turn matchit.vim on
runtime macros/matchit.vim

" --- fzf settings
set rtp+=/usr/local/opt/fzf
if executable('ag')
	let $FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
endif
nnoremap <Leader>f :FZF<CR>

" --- ctrlp settings
let g:ctrlp_prompt_mappings = {
	\ 'ToggleType(1)': ['<c-f>', '<c-up>', ';']
	\ }

let g:ctrlp_cmd = "CtrlPBuffer"

" Custom ignores
	" setting ctrlp_user_command disables some options like ctrlp_custom_ignore
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|\.sass-cache|ccss|node_modules)$|\v\.(pyc|orig|bundle\.js)$'

" Caching
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $XDG_CACHE_HOME.'/vim/ctrlp/'
let g:ctrlp_max_depth = 40

" Keymap
let g:ctrlp_prompt_mappings = {
\     'AcceptSelection("v")': ['<C-Enter>']
\  }

" MRU
let g:ctrlp_mruf_relative = 1
let g:ctrlp_mruf_max = 50

" Search Behavior
let g:ctrlp_lazy_update = 350 " ms
let g:ctrlp_working_path_mode = 'ra'

" use ag if available
if executable('ripgrep')
	let g:ctrlp_use_caching = 0
	let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
elseif executable('ag')
	set grepprg=ag\ --nogroup\ --nocolor
	" setting this disables some options like ctrlp_custom_ignore
	let g:ctrlp_user_command = 'ag %s -l -U --nocolor --hidden -g ""'
endif

" --- colorscheme
set t_Co=256
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

" --- Show whitespace
set list
set listchars=tab:⇨\ ,trail:.,eol:¬,extends:>,precedes:<
" colors based off of solarized dark
hi SpecialKey cterm=NONE ctermfg=236 ctermbg=234
hi NonText cterm=NONE ctermfg=236 ctermbg=234

" --- vim-airline settings
let g:airline_solarized_bg='dark'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#virtualenv#enabled = 1

" --- ack.vim settings
cabbrev ack Ack
nnoremap <Leader>s :lcd <C-r>=g:trainororiginalpwd<CR><CR>:Ack! -i<Space>
vnoremap <Leader>s y:lcd <C-r>=g:trainororiginalpwd<CR><CR>:Ack! -i<Space><C-r>"
let g:ack_autofold_results=1

if executable('ag')
	let g:ackprg = 'ag --vimgrep --ignore=*.map'
endif

" --- vim-fugitive
nnoremap <Leader>b :Gblame<CR>

" --- vim-gitgutter settings
let g:gitgutter_realtime = 0

" --- vim-dispatch settings
cabbrev dispatch Dispatch
nnoremap <Leader>d :Dispatch 

" --- vim-expand-region settings
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" --- vimpdb settings
nnoremap <leader>pp oimport pprint; import vimpdb; pp=pprint.pprint; vimpdb.set_trace()<esc>

" --- vim-javascript settings
let g:javascript_enable_domhtmlcss = 1
let g:javascript_plugin_flow = 1

" --- javascript-libraries-syntax.vim
let g:used_javascript_libs = 'underscore,jquery,react,requirejs,chai'

" --- vim-jsx settings
let g:jsx_ext_required = 0

" --- vim-flow settings
let g:flow#autoclose = 1

" --- clever-f.vim settings
let g:clever_f_chars_match_any_signs = ';' 

" --- git-gutter settings
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" --- vim-virtualenv settings
cnoreabbrev activate VirtualEnvActivate
cnoreabbrev deactivate VirtualEnvDeactivate

" --- vim-nose settings
cnoreabbrev rt RunTest
cnoreabbrev rt! RunTests!

" --- vim-commentary settings
autocmd FileType dosini setlocal commentstring=#\ %s

" --- vim-closetag settings
let g:closetag_filenames = "*.html, *.jsx, *.xml"

" --- supertab settings
" let g:SuperTabDefaultCompletionType = 'context'

" --- LanguageClient settings
" set hidden
" let g:LanguageClient_serverCommands = {
"     \ 'javascript': ['flow-language-server', '--stdio', '--try-flow-bin'],
"     \ 'javascript.jsx': ['flow-language-server', '--stdio', '--try-flow-bin'],
"     \ 'ruby': ['solargraph', 'stdio']
"     \ }

" nnoremap <silent> K :call g:LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call g:LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> <F2> :call g:LanguageClient#textDocument_rename()<CR>

" --- nnn.vim settings
let g:nnn#set_default_mappings = 0
nnoremap <silent> <leader>e :NnnPicker '%:p:h'<CR>

" --- vim-npr settings
let g:vim_npr_max_levels = 15

" --- gutentags settings
let g:gutentags_cache_dir = '~/.gutentags'

" --- CoC settings
" if hidden is not set, TextEdit might fail.
set hidden

set updatetime=300

let g:coc_node_args = ['--max-old-space-size=8192']

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
nmap <silent> [e <Plug>(coc-diagnostic-prev-error)
nmap <silent> ]e <Plug>(coc-diagnostic-next-error)

" key mappings
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> ga <Plug>(coc-codeaction)
vmap <silent> ga <Plug>(coc-codeaction-select)
nmap <silent> gA <Plug>(coc-codelens-action)
nmap <silent> gff <Plug>(coc-fix-current)
nmap <silent> gf <Plug>(coc-format)
vmap <silent> gf <Plug>(coc-format-selected)
nmap <silent> gx <Plug>(coc-float-hide)
nmap <silent> gn <Plug>(coc-rename)
nmap <silent> go <Plug>(coc-open-link)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>